# # -0.12866224 0.11540123  0.70365481 -0.68920135
# import numpy as np
# from scipy.spatial.transform import Rotation as R

# # 给定的变换矩阵T
# T = np.array([
#     [-9.402571710430225327e-01, -1.494311642038989758e-02, -3.401369659031778792e-01, 4.107097710569824471e+02],
#     [ 3.397536310584519659e-01,  2.336811486507700542e-02, -9.402241229569952008e-01, 1.179137526706944072e+03],
#     [ 2.199823821968963089e-02, -9.996152432207603411e-01, -1.689505951248902738e-02, 1.491245328572638806e+00],
#     [ 0.000000000000000000e+00,  0.000000000000000000e+00,  0.000000000000000000e+00, 1.000000000000000000e+00]
# ])

# # 提取旋转矩阵部分
# rotation_matrix = T[:3, :3]

# # 创建Rotation对象，并从旋转矩阵转换得到四元数
# rot = R.from_matrix(rotation_matrix)

# # 考虑到左手坐标系，我们可能需要调整四元数的顺序或者方向。
# # 在这个例子中，我们将直接获取四元数，但请注意根据具体应用需求来决定是否需要对四元数进行额外处理。
# quaternion = rot.as_quat()

# print("四元数:", quaternion)

import numpy as np
from scipy.spatial.transform import Rotation as R

# 给定的变换矩阵 T
T = np.array([
    [-9.402571710430225327e-01, -1.494311642038989758e-02, -3.401369659031778792e-01, 4.107097710569824471e+02],
    [ 3.397536310584519659e-01,  2.336811486507700542e-02, -9.402241229569952008e-01, 1.179137526706944072e+03],
    [ 2.199823821968963089e-02, -9.996152432207603411e-01, -1.689505951248902738e-02, 1.491245328572638806e+00],
    [ 0.000000000000000000e+00,  0.000000000000000000e+00,  0.000000000000000000e+00, 1.000000000000000000e+00]
])

# 计算 T 的逆矩阵
T_inv = np.linalg.inv(T)
print(T_inv)

# 提取逆矩阵中的旋转部分
rotation_matrix_inv = T_inv[:3, :3]

# 创建 Rotation 对象，并从旋转矩阵转换得到四元数
rot_inv = R.from_matrix(rotation_matrix_inv)

# 获取四元数表示
quaternion_inv = rot_inv.as_quat()

print("逆矩阵对应的四元数:", quaternion_inv)